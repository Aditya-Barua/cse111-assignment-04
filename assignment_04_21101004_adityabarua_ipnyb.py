# -*- coding: utf-8 -*-
"""Assignment  04_21101004_AdityaBarua.ipnyb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eBkCTwBqbH_xRJ-Xm6F1qYZnX57u6OAU
"""

#Task -1
class Calculator:
    def __init__(self, first_value , operator , second_value):
        self.first_value = int (first_value)
        self.operator = operator
        self.second_value = int (second_value)
        print("Let's calculate:")
    def add(self):
        print(self.first_value + self.second_value)
    def subtract(self):
        print(self.first_value - self.second_value)
    def multiply(self):
        print(self.first_value * self.second_value)
    def divide(self):
        print(self.first_value / self.second_value)

first_value = int(input("enter first value:"))
operator = input("enter operator:")
second_value = int(input("enter second value:"))
obj1 = Calculator(first_value, operator, second_value)

if operator == "+":
    obj1.add()
elif operator == "-":
    obj1.subtract()
elif operator == "*":
    obj1.multiply()
elif operator == "/":
    obj1.divide()

#Task-2
class Customer:
    def __init__(self,name):
        self.name = name
    def greet(self,greet = None):
        if greet == None:
            print("Hello!")
        elif greet != None:
            print("Hello",self.name,"!")
    def purchase(self,*items):
        count = 0
        for x in items:
            count = count + 1 
        print(self.name,"you have purchased",count) 
        for x in items:
            print(x)
customer_1 = Customer("Sam")
customer_1.greet("sam")
customer_1.purchase("chips", "chocolate", "orange juice")

#Task-3
class Panda:
    def __init__(self,name,gender,age):
        self.name = name
        self.gender = gender
        self.age = age
    

    def sleep(self,sleep = None):
        if sleep != None:
            self.sleep = sleep
            if self.sleep >= 3 and self.sleep <= 5:
                return f"{self.name} sleeps {self.sleep} hours daily and should have Mixed vaggies"
            elif self.sleep >= 6 and self.sleep <= 8:
               return f"{self.name} sleeps {self.sleep} hours daily and should have Eggplant"
            elif self.sleep >= 9 and self.sleep <= 11:
               return f"{self.name} sleeps {self.sleep} hours daily and should have Broccoli Chicken"
        else:
            return f"{self.name} sleeps duration unknown thus should have Bamboo leaves"

panda1 = Panda("Kunfu","Male", 5)
panda2=Panda("Pan Pan","Female",3)
panda3=Panda("Ming Ming","Female",8)
print("{} is a {} Panda Bear who is {} years old".format(panda1.name,panda1.gender,panda1.age))
print("{} is a {} Panda Bear who is {} years old".format(panda2.name,panda2.gender,panda2.age))
print("{} is a {} Panda Bear who is {} years old".format(panda3.name,panda3.gender,panda3.age))
print("===============================================")
print(panda2.sleep(11))
print(panda1.sleep(4))
print(panda3.sleep())

#Task - 4
class Cat:
    def __init__(self,*info):
        if len(info) == 0:
            self.color = "White"
            self.action = "sitting"
        elif len(info) == 1:
            self.color = info[0]
            self.action = "sitting"
        elif len(info) == 2:
            self.color = info[0]
            self.action = info[1]
        
        
    def changeColor(self,color):
        self.color = color

    def printCat(self):
        print (f"{self.color} cat is {self.action}")
    
    
c1 = Cat()
c2 = Cat("Black")
c3 = Cat("Brown", "jumping")
c4 = Cat("Red", "purring")
c1.printCat()
c2.printCat()
c3.printCat()
c4.printCat()
c1.changeColor("Blue")
c3.changeColor("Purple")
c1.printCat()
c3.printCat()

#Task - 5
class Student:
    def __init__(self,name = None):
        if name == None:
            self.name = "default student"
        else:
            self.name = name
    def quizcalc(self,*mark):
        count = 0
        for x in mark:
            count = count + x
        self.mark = count
    
    def printdetail(self):
        print(f"Hello {self.name}")
        print(f"Your average quiz score is {self.mark / 3}")

s1 = Student()
s1.quizcalc(10)
print('--------------------------------')
s1.printdetail()
s2 = Student('Harry')
s2.quizcalc(10,8)
print('--------------------------------')
s2.printdetail()
s3 = Student('Hermione')
s3.quizcalc(10,9,10)
print('--------------------------------')
s3.printdetail()

# Task - 6
class Vehicle():
    def __init__(self,x = 0 , y = 0):
        self.x = x
        self.y = y
    def moveUp(self):
        self.y = self.y + 1
    def moveLeft(self):
        self.x = self.x - 1
    def moveDown(self):
        self.y = self.y - 1
    def moveRight(self):
        self.x = self.x + 1

    def print_position(self):
        print('(',self.x,',',self.y,')')

car = Vehicle()
car.print_position()
car.moveUp()
car.print_position()
car.moveLeft()
car.print_position()
car.moveDown()
car.print_position()
car.moveRight()

#Task - 7
class Programmer:
    def __init__(self,name,language,experience):
        self.name = name
        self.language = language
        self.experience = experience
        print("Horray! A new programmer is born")
    def addExp(self,new_experience):
        print("Updating experience of Jon Snow")
        self.experience = self.experience + new_experience
    def printDetails(self):
        print("Name:",self.name)
        print("Language:",self.language)
        print("Experience:",self.experience)

p1 = Programmer("Ethen Hunt", "Java", 10)
p1.printDetails()
print('--------------------------')
p2 = Programmer("James Bond", "C++", 7)
p2.printDetails()
print('--------------------------')
p3 = Programmer("Jon Snow", "Python", 4)
p3.printDetails()
p3.addExp(5)
p3.printDetails()

#Task - 8
class Student:
    def __init__(self,name,id,department = None):
        self.name = name
        self.id = id
        self.department = department
    def dailyEffort(self,time):
        self.time = time
        print("Name:",self.name)
        print("Id:",self.id)
        print("Daily effort:",time,"hour(s)")
        if self.department == None:
            print("Department : CSE")
        else:
            print("Department:",self.department)
    def printDetails(self):
        if self.department == None:
            if self.time <= 2:
                print("Suggestion: Should give more effort!")
            elif self.time > 2 and self.time <= 4:
                print("Suggestion: Keep up the good work!")
            else:
                print("Suggestion: Excellent! Now motivate others.")
        else:
            if self.time <= 2:
                print("Suggestion: Should give more effort!")
            elif self.time > 2 and self.time <= 4:
                print("Suggestion: Keep up the good work!")
            else:
                print("Suggestion: Excellent! Now motivate others.")

harry = Student('Harry Potter', 123)
harry.dailyEffort(3)
harry.printDetails()
print('========================')
john = Student("John Wick", 456, "BBA")
john.dailyEffort(2)
john.printDetails()
print('========================')
naruto = Student("Naruto Uzumaki", 777, "Ninja")
naruto.dailyEffort(6)
naruto.printDetails()

#Task- 9
class Patient:
    def __init__(self,name,age):
        self.name = name
        self.age = age
    def add_Symptom(self,*symptoms):
        self.symptoms = symptoms
        list1 = []
        for x in symptoms:
            list1.append(x)
        self.list1 = list1
    def printPatientDetail(self):
        print("Name",self.name)
        print("Age",self.age)
        if len(self.list1) == 1:
            print("Symptoms:",self.list1[0])
        elif len(self.list1) == 2:
            print("Symptoms:",self.list1[0],",",self.list1[1])
        elif len(self.list1) == 3:
            print("Symptoms:",self.list1[0],",",self.list1[1],",",self.list1[2])

p1 = Patient("Thomas", 23)
p1.add_Symptom("Headache")
p2 = Patient("Carol", 20)
p2.add_Symptom("Vomiting", "Coughing")
p3 = Patient("Mike", 25)
p3.add_Symptom("Fever", "Headache", "Coughing")
print("=========================")
p1.printPatientDetail()
print("=========================")
p2.printPatientDetail()
print("=========================")
p3.printPatientDetail()
print("=========================")

#Task - 10
class Avengers:
    def __init__(self,name,partner):
        self.name = name
        self.partner = partner
    def super_powers(self,*var):
        self.var = var
        list1 = []
        for x in var:
            list1.append(x)
        self.list1 = list1
    def printAvengersDetail(self):
        print("Name:",self.name)
        print("Partner:",self.partner)
        if len(self.list1) == 1:
            print("Superpowers:",self.list1[0])
        elif len(self.list1) == 2:
            print("Superpowers:",self.list1[0],",",self.list1[1])

a1 = Avengers('Captain America', 'Bucky Barnes')
a1.super_powers('Stamina', 'Slowed ageing')
a2 = Avengers('Doctor Strange', 'Ancient One')
a2.super_powers('Mastery of magic')
a3 = Avengers('Iron Man', 'War Machine')
a3.super_powers('Genius level intellect', 'Scientist ')
print("=========================")
a1.printAvengersDetail()
print("=========================")
a2.printAvengersDetail()
print("=========================")
a3.printAvengersDetail()
print("=========================")

#Task - 11
class Shinobi:
    def __init__(self,name,rank):
        self.name = name
        self.rank = rank
        self.salary = 0
        self.mission = 0
    def changeRank(self,rank):
        self.rank = rank
    def calSalary(self,mission):
        self.mission = mission
        if self.rank == "Genin":
            self.salary = self.mission * 50
        elif self.rank == "Chunin":
            self.salary = self.mission * 100
        else:
            self.salary = self.mission * 500
    def printInfo(self):
        print("Name:",self.name)
        print("Rank:",self.rank)
        print("Number of mission:",self.mission)
        print("salary:",self.salary)
        
naruto = Shinobi("Naruto", "Genin")
naruto.calSalary(5)
naruto.printInfo()
print('====================')
shikamaru = Shinobi('Shikamaru', "Genin")
shikamaru.printInfo()
shikamaru.changeRank("Chunin")
shikamaru.calSalary(10)
shikamaru.printInfo()
print('====================')
neiji = Shinobi("Neiji", "Jonin")
neiji.calSalary(5)
neiji.printInfo()

#Task -12
class ParcelKoro:
    def __init__(self,*info):
        if len(info) == 0:
            self.name = "No name set"
            self.product_weight = 0
        elif len(info) == 1:
            self.name = info[0]
            self.product_weight = 0
        elif len(info) == 2:
            self.name = info[0]
            self.product_weight = info[1]
    def calculateFee(self,location = None):
        self.location = location
        if self.product_weight == 0:
            self.fee = 0
        elif self.location != None:
            self.fee = (self.product_weight * 20) + 100
        else:
            self.fee = (self.product_weight * 20) + 50
    
    def printDetails(self):
        print("Name:",self.name)
        print("product weight:",self.product_weight)
        print("Total fee:",self.fee)

print("**********************")
p1 = ParcelKoro()
p1.calculateFee()
p1.printDetails()
print("**********************")
p2 = ParcelKoro('Bob The Builder')
p2.calculateFee()
p2.printDetails()
print("----------------------------")
p2.product_weight = 15
p2.calculateFee()
p2.printDetails()
print("**********************")
p3 = ParcelKoro('Dora The Explorer', 10)
p3.calculateFee('Dhanmondi')
p3.printDetails()

#Task - 13
class Batsman:
    def __init__(self,*info):
        if len(info) == 2:
            runs,balls = info
        else:
            player,runs,balls = info
            
        if len(info) != 2:
            self.name = player
        else:
            self.name = "New Batsman"
        self.runs = runs
        self.balls = balls

    def setName(self,name):
        self.name = name
    def battingStrikeRate(self):
        return (self.runs / self.balls)* 100
    def printCareerStatistics(self):
        print(f"Name:{self.name}")
        print(f"Runs scored:{self.runs}, Balls faced : {self.balls}")

b1 = Batsman(6101, 7380)
b1.printCareerStatistics()
print("============================")
b2 = Batsman("Liton Das", 678, 773)
b2.printCareerStatistics()
print("============================")
print(b2.battingStrikeRate())
print("============================")
b1.setName("Shakib Al Hasan")
b1.printCareerStatistics()
print("============================")
print(b1.battingStrikeRate())

#Task - 14
class EPL_Team:
    def __init__(self,name,song=None,title = 0):
        self.name = name
        self.song = song
        self.title = title
        if(self.song == None):
            self.song = "No Slogan"
    def increaseTitle(self):
        self.title =self.title + 1

    def changeSong(self,new_song):
        self.song = new_song

    def showClubInfo(self):
        return (f"Name : {self.name}\nSong: {self.song}\nTotal No. of Title: {self.title}.")

manu = EPL_Team('Manchester United', 'Glory Glory Man United')
chelsea = EPL_Team('Chelsea')
print('===================')
print(manu.showClubInfo())
print('##################')
manu.increaseTitle()
print(manu.showClubInfo())
print('===================')
print(chelsea.showClubInfo())
chelsea.changeSong('Keep the blue flag flying high')
print(chelsea.showClubInfo())

#Task - 15
class Account:
  def __init__(self,name='Default Account',balance = 0.0):
    self.name=name
    self.balance = balance

  def withdraw(self,withdraw = 0):
    self.new_balance = self.balance - withdraw
    if self.new_balance > 3070:
      print('Withdraw successful! New balance is:', self.new_balance)
    else:
      print('Sorry, Withdraw unsuccessful! The account balance after deducting withdraw amount is equal to or less than minimum.')

  def details(self):
    return f"{self.name}\n{self.balance}"

a1 = Account()
print(a1.details())
print("------------------------")
a1.name = "Oliver"
a1.balance = 10000.0
print(a1.details())
print("------------------------")
a2 = Account("Liam")
print(a2.details())
print("------------------------")
a3 = Account("Noah",400.0)
print(a3.details())
print("------------------------")
a1.withdraw(6930);
print("------------------------")
a2.withdraw(600);
print("------------------------")
a1.withdraw(6929)

#Task -16
class Author:
  def __init__(self,author='Default',*info):
    self.name=author
    self.lst='List of Books:\n'
    if info==():
      pass
    else:
      for x in range(len(info)):
        if x == len(info)-1:
          self.lst = self.lst + info[x]
        else:
          self.lst = self.lst + info[x]+"\n"
  def addBooks(self,*books):
    for x in range(len(books)):
        if x == len(books)-1:
          self.lst = self.lst + books[x]
        else:
          self.lst = self.lst + books[x]+"\n"
  def changeName(self,new_author):
    self.name=new_author
  def printDetails(self):
    print('Author Name:',self.name)
    print("======================")
    print(self.lst)

auth1 = Author('Humayun Ahmed')
auth1.addBooks('Deyal', 'Megher Opor Bari')
auth1.printDetails()
print("========================")
auth2 = Author()
print(auth2.name)
auth2.changeName('Mario Puzo')
auth2.addBooks('The Godfather', 'Omerta', 'The Sicilian')
print("========================")
auth2.printDetails()
print("=========================")
auth3 = Author('Paolo Coelho', 'The Alchemist', 'The Fifth Mountain')
auth3.printDetails()